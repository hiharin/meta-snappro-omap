From 3bce1df9a470fe2c64b801fc7d0bd5f04f1ade91 Mon Sep 17 00:00:00 2001
From: David West <david-west@idexx.com>
Date: Thu, 8 Oct 2015 11:55:31 -0400
Subject: [PATCH] HIMAX lcd updates, NAND updates, UART config, gpio config

---
 Makefile                        |   2 +-
 board/dm3730logic/dm3730logic.c |  30 ++--
 drivers/lcd.c                   | 375 +++++++++++++++++++++++++++++++---------
 3 files changed, 317 insertions(+), 90 deletions(-)

diff --git a/Makefile b/Makefile
index 670ca93..c8b64a1 100644
--- a/Makefile
+++ b/Makefile
@@ -25,7 +25,7 @@
 #
 
 VERSION = 1
-PATCHLEVEL = 42
+PATCHLEVEL = 43
 SUBLEVEL =
 EXTRAVERSION =
 ifneq "$(SUBLEVEL)" ""
diff --git a/board/dm3730logic/dm3730logic.c b/board/dm3730logic/dm3730logic.c
index 65d92e9..12104c4 100755
--- a/board/dm3730logic/dm3730logic.c
+++ b/board/dm3730logic/dm3730logic.c
@@ -984,11 +984,11 @@ int nand_init(void)
 
 #define LOGIC_NAND_GPMC_CONFIG1	0x00001800
 #define LOGIC_NAND_GPMC_CONFIG2	0x00090900
-#define LOGIC_NAND_GPMC_CONFIG3	0x00090902
-#define LOGIC_NAND_GPMC_CONFIG4	0x07020702
-#define LOGIC_NAND_GPMC_CONFIG5	0x00080909
-#define LOGIC_NAND_GPMC_CONFIG6	0x000002CF
-#define LOGIC_NAND_GPMC_CONFIG7	0x00000C70
+#define LOGIC_NAND_GPMC_CONFIG3	0x00090900
+#define LOGIC_NAND_GPMC_CONFIG4	0x06000700
+#define LOGIC_NAND_GPMC_CONFIG5	0x00070c0c
+#define LOGIC_NAND_GPMC_CONFIG6	0x00000fCF
+#define LOGIC_NAND_GPMC_CONFIG7	0x00000f70
 
 	if ((get_mem_type() == GPMC_NAND) || (get_mem_type() == MMC_NAND)){
         	__raw_writel( LOGIC_NAND_GPMC_CONFIG1, GPMC_CONFIG1 + GPMC_CONFIG_CS0);
@@ -1607,9 +1607,13 @@ void set_muxconf_regs(void)
 	MUX_VAL(CP(MCBSP1_FSX),		(IEN  | PTD | EN  | M7)); /*MCBSP1_FSX*/
 	MUX_VAL(CP(MCBSP1_CLKX),	(IEN  | PTD | EN  | M7)); /*MCBSP1_CLKX  */
  /*Serial Interface*/
-	MUX_VAL(CP(UART3_CTS_RCTX),	(IEN  | PTD | EN  | M7)); /*UART3_CTS_*/
-								 /* RCTX*/
-	MUX_VAL(CP(UART3_RTS_SD),	(IEN  | PTD | EN  | M7)); /*UART3_RTS_SD */
+	// changed to gpio's
+	//MUX_VAL(CP(UART3_CTS_RCTX),	(IEN  | PTD | EN  | M7)); /*UART3_CTS_*/
+	/* RCTX*/
+	//MUX_VAL(CP(UART3_RTS_SD),	(IEN  | PTD | EN  | M7)); /*UART3_RTS_SD */
+	MUX_VAL(CP(UART3_CTS_RCTX),	(IEN  | PTD | EN  | M4)); /*GPIO_163 */ 
+	MUX_VAL(CP(UART3_RTS_SD),	(IEN  | PTD | EN  | M4)); /*GPIO_164 */
+
 	MUX_VAL(CP(UART3_RX_IRRX),	(IEN  | PTD | EN  | M7)); /*UART3_RX_IRRX*/
 	MUX_VAL(CP(UART3_TX_IRTX),	(IEN  | PTD | EN  | M7)); /*UART3_TX_IRTX*/
 	MUX_VAL(CP(HSUSB0_CLK),		(IEN  | PTD | EN  | M7)); /*HSUSB0_CLK*/
@@ -1641,9 +1645,13 @@ void set_muxconf_regs(void)
 	MUX_VAL(CP(MCBSP1_FSX),		(IEN  | PTD | DIS | M0)); /*MCBSP1_FSX*/
 	MUX_VAL(CP(MCBSP1_CLKX),	(IEN  | PTD | DIS | M0)); /*MCBSP1_CLKX  */
  /*Serial Interface*/
-	MUX_VAL(CP(UART3_CTS_RCTX),	(IEN  | PTD | EN  | M0)); /*UART3_CTS_*/
-								 /* RCTX*/
-	MUX_VAL(CP(UART3_RTS_SD),	(IDIS | PTD | DIS | M0)); /*UART3_RTS_SD */
+	// changed to gpio's
+	//MUX_VAL(CP(UART3_CTS_RCTX),	(IEN  | PTD | EN  | M7)); /*UART3_CTS_*/
+	/* RCTX*/
+	//MUX_VAL(CP(UART3_RTS_SD),	(IEN  | PTD | EN  | M7)); /*UART3_RTS_SD */
+	MUX_VAL(CP(UART3_CTS_RCTX),	(IEN  | PTD | EN  | M4)); /*GPIO_163 */ 
+	MUX_VAL(CP(UART3_RTS_SD),	(IEN  | PTD | EN  | M4)); /*GPIO_164 */
+
 	MUX_VAL(CP(UART3_RX_IRRX),	(IEN  | PTD | DIS | M0)); /*UART3_RX_IRRX*/
 	MUX_VAL(CP(UART3_TX_IRTX),	(IDIS | PTD | DIS | M0)); /*UART3_TX_IRTX*/
 	MUX_VAL(CP(HSUSB0_CLK),		(IEN  | PTD | DIS | M0)); /*HSUSB0_CLK*/
diff --git a/drivers/lcd.c b/drivers/lcd.c
index d0b5b40..e9742a2 100644
--- a/drivers/lcd.c
+++ b/drivers/lcd.c
@@ -30,7 +30,8 @@
 #define SPLASH_IMG_BASE	0x82000000
 #define LCD_FB_BASE	0x83000000
 
-#define LCD_GPIO_RESET	131
+//#define LCD_GPIO_RESET	131	/* LCD_GPIO_RESET in Alpha board is 131 */
+#define LCD_GPIO_RESET	153	/* LCD_GPIO_RESET in Alpha2 board is 153 */
 #define LCD_GPIO_BL	154
 #define LCD_GPIO_EN	155
 
@@ -39,6 +40,10 @@
 #define LCD_GPIO_SDO	159
 #define LCD_GPIO_CS	161
 
+#define LCD_PANEL_HIMAX_HX8369	1
+#define LCD_PANEL_HIMAX_HX8363	2
+#define LCD_PANEL_HIMAX_UNKNOWN	-1
+
 enum lcd_panel {
 	LCD_PANEL_SEIKO,
 	LCD_PANEL_HIMAX
@@ -49,6 +54,11 @@ static uchar *lcdfb;
 
 static struct panel_config dss_panel;
 
+static int sbus_rx_bit(void);
+static void sbus_rx_data(u8 *data, u8 numbits);
+unsigned char Read_HIMAX_LCD_ID(void);
+static int econ_spi_reg_read(enum lcd_panel ,u8 , u8 ,u8 *);
+
 extern block_dev_desc_t *mmc_get_dev(int dev);
 
 struct omap_video_timings {
@@ -162,7 +172,11 @@ static void lcd_pinmux_setup(void)
 	MUX_VAL(CP(MCBSP1_DX), 	(IEN  | PTD | DIS | M4)); /*MCSPI4_SIMO*/
 	MUX_VAL(CP(MCBSP1_DR), 	(IEN  | PTD | DIS | M4)); /*MCSPI4_SOMI*/
 
+#if (LCD_GPIO_RESET==131)
 	MUX_VAL(CP(MMC2_CMD), 	(IDIS | PTD | DIS | M4)); /*GPIO_131*/
+#elif (LCD_GPIO_RESET==153)
+	MUX_VAL(CP(MCBSP4_DR), 	(IDIS | PTD | DIS | M4)); /*GPIO_153*/
+#endif
 	MUX_VAL(CP(MCBSP4_DX), 	(IDIS | PTD | DIS | M4)); /*GPIO_154*/
 	MUX_VAL(CP(MCBSP4_FSX), (IDIS | PTD | DIS | M4)); /*GPIO_155*/
 	MUX_VAL(CP(GPMC_NCS5), 	(IEN  | PTD | DIS | M3)); /*GPT10 backlight*/
@@ -242,6 +256,18 @@ static void sbus_tx_bit(u16 sbit)
 }
 
 /*
+ * SPI bus rx bit
+ */
+static int sbus_rx_bit()
+{
+	int sdo=0;
+	//Once complete cycle to rx one bit
+	sbus_clock();
+	sdo = omap_get_gpio_datain(LCD_GPIO_SDO);
+	return sdo;
+}
+
+/*
  * SPI bus tx data
  */
 static void sbus_tx_data(u16 data, u8 numbits)
@@ -253,6 +279,24 @@ static void sbus_tx_data(u16 data, u8 numbits)
 }
 
 /*
+ * SPI bus rx data
+ */
+static void sbus_rx_data(u8 *data, u8 numbits)
+{
+
+	// Initialize read data as 0.
+	*data = 0 ;
+	//Read bits of data MSB to LSB
+	do {
+		*data |= (sbus_rx_bit()) << (numbits-1);
+		numbits--;
+		if(numbits==0)	return;
+	} while (1);
+}
+
+
+
+/*
  * Write SPI register data
  */
 static int write_reg(enum lcd_panel panel, u8 reg, u8 num, ...)
@@ -291,6 +335,45 @@ static int write_reg(enum lcd_panel panel, u8 reg, u8 num, ...)
 }
 
 /*
+ * Read register(s) from Himax LCD modules
+ * panel - seiko or himax. Currenty this function is tested only for himax lcd module
+ * reg - register address
+ * num - number of data (i.e bytes) to be read starting that that register address
+ * read_buf - read data will be stored in this buffer
+*/
+
+static int econ_spi_reg_read(enum lcd_panel panel,u8 reg, u8 num,u8 *read_buf)
+{
+	u8 i;
+	u16 msg;
+
+	// Send SPI INTEX  Read Command with one parameter (reg address)
+	write_reg(LCD_PANEL_HIMAX, 0xFE,1,reg);
+
+	// Send SPIREAD Command
+	//write_reg(LCD_PANEL_HIMAX, 0xFF,0);
+
+	// Enable ChipSelect
+	sbus_start();
+
+	// Send SPIREAD Command
+	msg = 0xFF;
+        sbus_tx_data(msg, panel == LCD_PANEL_SEIKO ? 16 : 9);
+
+	// Reading Data from SPI 
+	for (i = 0; i < num; i++) 
+	{
+      		sbus_rx_data(&read_buf[i],8);
+	}
+
+	// Disable ChipSelect
+	sbus_stop();
+	return 0;
+}
+
+
+
+/*
  * LCD SPI bus init
  */
 static void sbus_init(void)
@@ -304,18 +387,11 @@ static void sbus_init(void)
 	omap_set_gpio_direction(LCD_GPIO_EN, 0);
 	omap_set_gpio_direction(LCD_GPIO_BL, 0);
 
-	omap_set_gpio_dataout(LCD_GPIO_RESET, 0);
+	omap_set_gpio_dataout(LCD_GPIO_RESET, 1);
 	omap_set_gpio_dataout(LCD_GPIO_EN, 0);
 	omap_set_gpio_dataout(LCD_GPIO_BL, 0);
 	udelay(10000);
 
-	//Reset Sequence for LCD
-	omap_set_gpio_dataout(LCD_GPIO_RESET, 1);
-	udelay(10000);
-	omap_set_gpio_dataout(LCD_GPIO_RESET, 0);
-	udelay(100000);
-	omap_set_gpio_dataout(LCD_GPIO_RESET, 1);
-	udelay(100000);
 }
 
 /*
@@ -323,6 +399,9 @@ static void sbus_init(void)
  */
 static void lcd_reg_init(enum lcd_panel panel)
 {
+	int i=0;
+	unsigned char HIMAX_ID=0;
+	
 	if (panel == LCD_PANEL_SEIKO) {
 		write_reg(panel, 0x20, 1, 0x00);
         	write_reg(panel, 0x3A, 1, 0x70);
@@ -352,79 +431,174 @@ static void lcd_reg_init(enum lcd_panel panel)
 		udelay(1000);
         	write_reg(panel, 0x29, 1, 0x00);
 		write_reg(panel, 0x11, 1, 0x00);
-	} else { //Himax
-		write_reg(panel, 0xb9,3,0xff,0x83,0x69); 
-		//Set Power
-        	write_reg(panel, 0xB1,19, 
-			     0x85, 0x00, 0x34, 0x07, 0x00, 0x0F, 0x0F, 0x2A,
-			     0x32, 0x3F, 0x3F,
-			     //update VBIAS
-			     0x01, 0x3A, 0x01, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6);
-		//Set display to 480x800
-		write_reg(panel, 0xB2, 15, 
-			     0x00, 0x28, 0x05, 0x05, 0x70, 0x00, 0xFF, 0x00, 
-			     0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x01); 
-		//Set RGB interface
-		write_reg(panel, 0xB3, 1, 0x1); 
-		//Set CYC
-		write_reg(panel, 0xB4, 5, 0x00, 0x18, 0x80, 0x06, 0x02);  
-		//Set VCOM
-		write_reg(panel, 0xB6, 2, 0x42, 0x42);  
-		//Set GIP
-		write_reg(panel, 0xD5, 26, 
-			     0x00, 0x04, 0x03, 0x00, 0x01, 0x05, 0x28, 0x70, 
-			     0x01, 0x03, 0x00, 0x00, 0x40, 0x06, 0x51, 0x07, 
-			     0x00, 0x00, 0x41, 0x06, 0x50, 0x07, 0x07, 0x0F, 
-			     0x04, 0x00);  
-		//Set gamma
-		write_reg(panel, 0xE0, 34, 
-			     0x00, 0x13, 0x19, 0x38, 0x3D, 0x3F, 0x28, 0x46, 
-			     0x07, 0x0D, 0x0E, 0x12, 0x15, 0x12, 0x14, 0x0F, 
-			     0x17, 0x00, 0x13, 0x19, 0x38, 0x3D, 0x3F, 0x28, 
-			     0x46, 0x07, 0x0D, 0x0E, 0x12, 0x15, 0x12, 0x14, 
-			     0x0F, 0x17); 
-		//Set DGC LUT
-        	write_reg(panel, 0xC1, 127, 0x01,
-			     //R
-			     0x04, 0x13, 0x1a, 0x20, 0x27, 0x2c, 0x32, 0x36,
-			     0x3f, 0x47, 0x50, 0x59, 0x60, 0x68, 0x71, 0x7B,
-			     0x82, 0x89, 0x91, 0x98, 0xA0, 0xA8, 0xB0, 0xB8,
-			     0xC1, 0xC9, 0xD0, 0xD7, 0xE0, 0xE7, 0xEF, 0xF7,
-			     0xFE, 0xCF, 0x52, 0x34, 0xF8, 0x51, 0xF5, 0x9D,
-			     0x75, 0x00,
-			     //G
-			     0x04, 0x13, 0x1a, 0x20, 0x27, 0x2c, 0x32, 0x36,
-			     0x3f, 0x47, 0x50, 0x59, 0x60, 0x68, 0x71, 0x7B,
-			     0x82, 0x89, 0x91, 0x98, 0xA0, 0xA8, 0xB0, 0xB8,
-			     0xC1, 0xC9, 0xD0, 0xD7, 0xE0, 0xE7, 0xEF, 0xF7,
-			     0xFE, 0xCF, 0x52, 0x34, 0xF8, 0x51, 0xF5, 0x9D,
-			     0x75, 0x00,
-			     //B
-			     0x04, 0x13, 0x1a, 0x20, 0x27, 0x2c, 0x32, 0x36,
-			     0x3f, 0x47, 0x50, 0x59, 0x60, 0x68, 0x71, 0x7B,
-			     0x82, 0x89, 0x91, 0x98, 0xA0, 0xA8, 0xB0, 0xB8,
-			     0xC1, 0xC9, 0xD0, 0xD7, 0xE0, 0xE7, 0xEF, 0xF7,
-			     0xFE, 0xCF, 0x52, 0x34, 0xF8, 0x51, 0xF5, 0x9D,
-			     0x75, 0x00); 
-		//Set tear on
-		write_reg(panel, 0x35, 1, 0x00);
-		//Set pixel format
-		write_reg(panel, 0x3A, 1, 0x77);   
-		//Exit sleep mode
-		write_reg(panel, 0x11, 0);
-		udelay(1000);
-		//Set display on
-		write_reg(panel, 0x29,0);  
-		//Set memory start
-		write_reg(panel, 0x2C,0); 
-		udelay(1000);
-	}
+	} // LCD_PANEL_SEIKO
+	else 
+	{ //Himax
+
+		HIMAX_ID=Read_HIMAX_LCD_ID();
+		switch(HIMAX_ID)
+		{
+			case LCD_PANEL_HIMAX_HX8369:
+			{
+				// Send SETEXTC command
+				write_reg(panel, 0xb9,3,0xff,0x83,0x69); 
+				//Set Power
+        			write_reg(panel, 0xB1,19, 
+					     0x85, 0x00, 0x34, 0x07, 0x00, 0x0F, 0x0F, 0x2A,
+					     0x32, 0x3F, 0x3F,
+					     //update VBIAS
+					     0x01, 0x3A, 0x01, 0xE6, 0xE6, 0xE6, 0xE6, 0xE6);
+				//Set display to 480x800
+				write_reg(panel, 0xB2, 15, 
+					     0x00, 0x28, 0x05, 0x05, 0x70, 0x00, 0xFF, 0x00, 
+					     0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x01); 
+				//Set RGB interface
+				write_reg(panel, 0xB3, 1, 0x1); 
+				//Set CYC
+				write_reg(panel, 0xB4, 5, 0x00, 0x18, 0x80, 0x06, 0x02);  
+				//Set VCOM
+				write_reg(panel, 0xB6, 2, 0x42, 0x42);  
+				//Set GIP
+				write_reg(panel, 0xD5, 26, 
+					     0x00, 0x04, 0x03, 0x00, 0x01, 0x05, 0x28, 0x70, 
+					     0x01, 0x03, 0x00, 0x00, 0x40, 0x06, 0x51, 0x07, 
+					     0x00, 0x00, 0x41, 0x06, 0x50, 0x07, 0x07, 0x0F, 
+					     0x04, 0x00);  
+				//Set gamma
+				write_reg(panel, 0xE0, 34, 
+					     0x00, 0x13, 0x19, 0x38, 0x3D, 0x3F, 0x28, 0x46, 
+					     0x07, 0x0D, 0x0E, 0x12, 0x15, 0x12, 0x14, 0x0F, 
+					     0x17, 0x00, 0x13, 0x19, 0x38, 0x3D, 0x3F, 0x28, 
+					     0x46, 0x07, 0x0D, 0x0E, 0x12, 0x15, 0x12, 0x14, 
+					     0x0F, 0x17); 
+				//Set DGC LUT
+	        		write_reg(panel, 0xC1, 127, 0x01,
+					     //R
+					     0x04, 0x13, 0x1a, 0x20, 0x27, 0x2c, 0x32, 0x36,
+					     0x3f, 0x47, 0x50, 0x59, 0x60, 0x68, 0x71, 0x7B,
+					     0x82, 0x89, 0x91, 0x98, 0xA0, 0xA8, 0xB0, 0xB8,
+					     0xC1, 0xC9, 0xD0, 0xD7, 0xE0, 0xE7, 0xEF, 0xF7,
+					     0xFE, 0xCF, 0x52, 0x34, 0xF8, 0x51, 0xF5, 0x9D,
+					     0x75, 0x00,
+					     //G
+					     0x04, 0x13, 0x1a, 0x20, 0x27, 0x2c, 0x32, 0x36,
+					     0x3f, 0x47, 0x50, 0x59, 0x60, 0x68, 0x71, 0x7B,
+					     0x82, 0x89, 0x91, 0x98, 0xA0, 0xA8, 0xB0, 0xB8,
+					     0xC1, 0xC9, 0xD0, 0xD7, 0xE0, 0xE7, 0xEF, 0xF7,
+					     0xFE, 0xCF, 0x52, 0x34, 0xF8, 0x51, 0xF5, 0x9D,
+					     0x75, 0x00,
+					     //B
+					     0x04, 0x13, 0x1a, 0x20, 0x27, 0x2c, 0x32, 0x36,
+   				     	     0x3f, 0x47, 0x50, 0x59, 0x60, 0x68, 0x71, 0x7B,
+					     0x82, 0x89, 0x91, 0x98, 0xA0, 0xA8, 0xB0, 0xB8,
+					     0xC1, 0xC9, 0xD0, 0xD7, 0xE0, 0xE7, 0xEF, 0xF7,
+					     0xFE, 0xCF, 0x52, 0x34, 0xF8, 0x51, 0xF5, 0x9D,
+					     0x75, 0x00); 
+				//Set tear on
+				write_reg(panel, 0x35, 1, 0x00);
+				//Set pixel format
+				write_reg(panel, 0x3A, 1, 0x77);   
+				//Exit sleep mode
+				write_reg(panel, 0x11, 0);
+				udelay(1000);
+				//Set display on
+				write_reg(panel, 0x29,0);  
+				//Set memory start
+				write_reg(panel, 0x2C,0); 
+				udelay(1000);
+			} // LCD_PANEL_HIMAX_HX8369
+			break;
+			case LCD_PANEL_HIMAX_HX8363:
+			{
+				// LCD Init Sequence as mentioned in the Truly LCD MODULE Application Note Version:0.3  2014-01-24 (TDO-WVGA0347F00029-E Application Note V0.3.doc)
+				// Send SETEXTC command
+				write_reg(panel, 0xb9,3,0xff,0x83,0x63); 
+				// Set Power
+				write_reg(panel, 0xB1,12, 
+				0x81, 0x30, 0x05, 0x32, 0x01, 0x13, 0x0D, 0x0D,
+				0x22, 0x22, 0x1E,0x1E);
+	
+				//Memory Access Control
+				write_reg(panel, 0x36,1,0x02);
+
+				// COLMOD
+				write_reg(panel, 0x3A,1,0x70);
+	
+				//Set_RGBIF
+				write_reg(panel, 0xB3,1,0x01);
+
+				//Set_CYC CPT
+				write_reg(panel, 0xB4,11,0x00,0x03,0xe0,0x30,0x01,0x12,0x64,0x01,0xff,0x00,0x00);
+
+				//Set_VCOM
+				write_reg(panel, 0xB6,1,0x15);
+
+				//Set_Panel
+				write_reg(panel, 0xCC,1,0x03);
+
+				//Delay for 5milli seconds
+				udelay(5 * 1000);
+
+				//Gamma 2.2 
+				write_reg(panel,0xE0,30,
+					0x00,0x4F,0x5F,0x72,0x33,0x2F,0x80,0x89,0x0E,0xD0,0x52,0x11,0x14,0x57,0x1C,
+					0x00,0x4F,0x5F,0x72,0x33,0x2F,0x80,0x89,0x0E,0xD0,0x52,0x11,0x14,0x57,0x1C);
+
+				//Delay for 5milli seconds
+				udelay(5 * 1000);
+
+				//DGC - DGC should be off for 8363
+				write_reg(panel,0xC1,127,0x00,
+					0x06,0x0D,0x1E,0x2F,0x3F,0x51,0x60,0x71,0x80,0x8B,
+					0x95,0x9F,0xA8,0xB1,0xBD,0xC8,0xCE,0xD5,0xDB,0xE1,
+					0xE4,0xE7,0xEB,0xEE,0xF0,0xF2,0xF4,0xF7,0xF8,0xFA,
+					0xFC,0xFD,0xFF,0xB1,0xDE,0xAE,0x90,0xDB,0x20,0xFC,
+					0xA2,0x02,
+				
+					0x06,0x0D,0x1E,0x2F,0x3F,0x51,0x60,0x71,0x80,0x8B,
+					0x95,0x9F,0xA8,0xB1,0xBD,0xC8,0xCE,0xD5,0xDB,0xE1,
+					0xE4,0xE7,0xEB,0xEE,0xF0,0xF2,0xF4,0xF7,0xF8,0xFA,
+					0xFC,0xFD,0xFF,0xB1,0xDE,0xAE,0x90,0xDB,0x20,0xFC,
+					0xA2,0x02,
+			
+					0x06,0x0D,0x1E,0x2F,0x3F,0x51,0x60,0x71,0x80,0x8B,
+					0x95,0x9F,0xA8,0xB1,0xBD,0xC8,0xCE,0xD5,0xDB,0xE1,
+					0xE4,0xE7,0xEB,0xEE,0xF0,0xF2,0xF4,0xF7,0xF8,0xFA,
+					0xFC,0xFD,0xFF,0xB1,0xDE,0xAE,0x90,0xDB,0x20,0xFC,
+					0xA2,0x02);
+
+				//Delay for 5milli seconds
+				udelay(5 * 1000);
+			
+				//Sleep Out	
+				write_reg(panel, 0x11,0);
+
+				//Delay for 125milli seconds
+				for(i=0;i<125;i++)
+				{
+					udelay((1000));
+				}
+
+				//Set_Panel
+				write_reg(panel, 0x29,0);
+				udelay(1000);
+			} // LCD_PANEL_HIMAX_HX8363
+			break;
+			default:
+			case LCD_PANEL_HIMAX_UNKNOWN:
+			{
+				// Do nothing here
+			}
+			break;
+		} // end of switch case for HIMAX_ID
+	
+	} // LCD_PANEL_HIMAX
 }
 
 /*
  * Enable LCD panel and backlight
  */
-static void lcd_enable(void)
+void lcd_enable(void)
 {
 	//Start clocks
 	omap3_dss_enable();
@@ -441,6 +615,14 @@ static void lcd_enable(void)
 	//Delay 10ms to allow the panel to stabilize
 	udelay(10000);
 
+	//Reset Sequence for LCD
+	omap_set_gpio_dataout(LCD_GPIO_RESET, 1);
+	udelay(10000);
+	omap_set_gpio_dataout(LCD_GPIO_RESET, 0);
+	udelay(5000);
+	omap_set_gpio_dataout(LCD_GPIO_RESET, 1);
+	udelay(500000);
+	
 	//Turn on lcd backlight pwr
 	omap_set_gpio_dataout(LCD_GPIO_BL, 1);
 }
@@ -607,7 +789,6 @@ void lcd_init(omap_boot_device_t boot_device)
        	int ret;
 	long size;
 	enum lcd_panel panel;
-
 	splash = (uchar *) SPLASH_IMG_BASE;
 	lcdfb = (uchar *) LCD_FB_BASE;
 
@@ -650,6 +831,7 @@ void lcd_init(omap_boot_device_t boot_device)
 	lcd_pinmux_setup();
 
 	//DSS setup
+
 	omap3_dss_panel_config(get_panel_config(&lcd_panel_cfg[panel]));
 	omap3_dss_set_fb((ulong) lcdfb);
 
@@ -661,6 +843,43 @@ void lcd_init(omap_boot_device_t boot_device)
 
 	//Configure LCD
 	lcd_reg_init(panel);
+	
 
 	printf("Splash screen loaded\n");
 }
+
+
+//===================================================================================
+/* 
+ * Read IDs from LCD module
+ * This function returns one of the followings
+ *  LCD_PANEL_HIMAX_HX8363 when LCD module HX8363 is interfaced to uP
+ *  LCD_PANEL_HIMAX_HX8369 when LCD module HX8369 is interfaced to uP
+ *  LCD_PANEL_HIMAX_UNKNOWN when neither LCD module HX8363 nor HX8369 is interfaced to uP
+ */
+unsigned char Read_HIMAX_LCD_ID(void)
+{
+	unsigned char reg_read_buf[2048];
+	int i=0;
+	// Send Command SETEXT with parameters for LCD module HX8363
+	write_reg(LCD_PANEL_HIMAX, 0xB9,3,0xFF,0x83,0x63);
+	// Clear read buffer
+	memset(reg_read_buf,128,0x00);
+	// Read IDs from regsiter 0xB9
+	econ_spi_reg_read(LCD_PANEL_HIMAX,0xB9,3,reg_read_buf);
+	if (reg_read_buf[2]==0x63)
+		return  LCD_PANEL_HIMAX_HX8363;
+	else
+	{	
+		// Send Command SETEXT with parameters for LCD module HX8363
+		write_reg(LCD_PANEL_HIMAX, 0xB9,3,0xFF,0x83,0x69); 
+		// Clear read buffer
+		memset(reg_read_buf,128,0x00);
+		// Read IDs from regsiter 0xB9
+		econ_spi_reg_read(LCD_PANEL_HIMAX,0xB9,3,reg_read_buf);
+		if (reg_read_buf[2]==0x69)
+				return  LCD_PANEL_HIMAX_HX8369;
+		else
+			return LCD_PANEL_HIMAX_UNKNOWN;
+	}
+}
-- 
1.8.3.2

